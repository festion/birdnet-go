name: BirdNET-Go Release Build

on:
  release:
    types: [created, edited]
  workflow_dispatch:

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

permissions:
  contents: write
  packages: write

jobs:
  build:
    if: ${{ !contains(github.ref, 'nightly') && (github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-24.04
          - goos: linux
            goarch: arm64
            os: ubuntu-24.04
          - goos: windows
            goarch: amd64
            os: ubuntu-24.04
          - goos: darwin
            goarch: arm64
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          check-latest: true

      - name: Install Linux system dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config gcc-aarch64-linux-gnu gcc-mingw-w64-x86-64

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build BirdNET-Go
        run: |
          # Build the application
          task ${{ matrix.goos }}_${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          BUILD_VERSION: ${{ github.ref_name }}

      - name: Create Release Artifacts
        run: |
          # Create artifacts directory
          mkdir -p artifacts
          
          # Set binary name based on OS
          BINARY_NAME=birdnet-go
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=birdnet-go.exe
          fi
          
          # Copy binary
          cp bin/$BINARY_NAME artifacts/
          
          # Copy required library files based on OS and architecture
          if [ "${{ matrix.goos }}" = "linux" ]; then
            if [ "${{ matrix.goarch }}" = "amd64" ]; then
              cp /usr/lib/libtensorflowlite_c.so artifacts/
            elif [ "${{ matrix.goarch }}" = "arm64" ]; then
              cp /usr/aarch64-linux-gnu/lib/libtensorflowlite_c.so artifacts/
            fi
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            cp /usr/x86_64-w64-mingw32/lib/tensorflowlite_c.dll artifacts/
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            cp /opt/homebrew/lib/libtensorflowlite_c.dylib artifacts/
          fi
          
          # Create tarball
          cd artifacts
          tar czf ../birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.ref_name }}.tar.gz *

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.ref_name }}.tar.gz

      - name: Get latest release tag
        if: github.event_name == 'workflow_dispatch'
        id: latest_release
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=${LATEST_TAG}" >> ${GITHUB_ENV}
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
      
      - name: Add Artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: birdnet-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.ref_name }}.tar.gz
          # For release events, use the triggering release
          # For workflow_dispatch, use the latest release tag
          tag_name: ${{ github.event_name == 'workflow_dispatch' && env.LATEST_TAG || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  get-version:
    if: ${{ !contains(github.ref, 'nightly') && (github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  docker:
    if: ${{ !contains(github.ref, 'nightly') && (github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    needs: get-version
    uses: ./.github/workflows/docker-build-push.yml
    with:
      tag-strategy: "release"
      version: ${{ needs.get-version.outputs.version }}
      create-latest-tag: true
      platforms: '["linux/amd64", "linux/arm64"]'
      push-to-ghcr: true
      push-to-dockerhub: true
      cleanup-old-images: false
      keep-images-count: 14
    secrets: inherit