name: Podman Compatibility Test

on:
  push:
    paths:
      - "Podman/**"
      - "Dockerfile"
  pull_request:
    paths:
      - "Podman/**"
      - "Dockerfile"

jobs:
  test-podman:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman podman-compose
          podman --version
          podman-compose --version

      - name: Pull Docker-built image
        run: |
          podman pull --platform ${{ matrix.platform }} ghcr.io/tphakala/birdnet-go:nightly || \
          podman pull ghcr.io/tphakala/birdnet-go:nightly

      - name: Create test directories
        run: |
          mkdir -p config data/clips data/models
          chmod 755 config data data/clips data/models

      - name: Test with Podman Compose
        run: |
          cd Podman/
          # Set test environment
          export WEB_PORT=8080
          export TZ=UTC
          export BIRDNET_UID=1000
          export BIRDNET_GID=1000

          # Use CI-specific compose file that doesn't require audio devices
          echo "Using CI-specific compose configuration without audio device requirements"

          # Start container using CI compose file
          podman-compose -f podman-compose.ci.yml up -d

          # Wait for container to be ready
          echo "Waiting for container to start..."
          sleep 30

          # Check container status
          podman-compose -f podman-compose.ci.yml ps

          # Check if container is healthy
          container_id=$(podman ps -q --filter name=birdnet-go)
          if [ -n "$container_id" ]; then
            echo "✅ Container is running with ID: $container_id"
            echo "Container logs:"
            podman logs --tail 50 "$container_id"
            
            # Check if container is actually responding
            if podman exec "$container_id" echo "Container is responsive"; then
              echo "✅ Container is responsive"
            else
              echo "❌ Container is not responsive"
              podman logs "$container_id"
              exit 1
            fi
          else
            echo "❌ Container failed to start"
            # Show all containers including stopped ones
            podman ps -a
            # Try to get logs from any birdnet-go container
            podman logs birdnet-go 2>&1 || true
            exit 1
          fi

          # Test web interface (basic connectivity)
          echo "Testing web interface connectivity..."
          if curl -f --retry 3 --retry-delay 10 http://localhost:8080; then
            echo "✅ Web interface is accessible"
          else
            echo "❌ Web interface is not accessible"
            # Show container logs for debugging
            podman logs birdnet-go
            exit 1
          fi

          # Clean up
          echo "Cleaning up..."
          podman-compose -f podman-compose.ci.yml down

      - name: Test Quadlet configuration syntax
        run: |
          echo "Testing Quadlet configuration syntax..."

          # Create a mock audio device for CI environment
          sudo mkdir -p /dev/snd
          sudo touch /dev/snd/mock

          # Test container configuration syntax with mock device
          if podman run --dry-run --replace \
            --name test-birdnet-go \
            -v ./config:/config \
            -v ./data:/data \
            -p 8080:8080 \
            -e TZ=UTC \
            -e BIRDNET_UID=1000 \
            -e BIRDNET_GID=1000 \
            -e BIRDNET_REALTIME_AUDIO_ENABLED=false \
            --device /dev/snd/mock:/dev/snd/mock \
            --network bridge \
            --tmpfs /config/hls:exec,size=50M,uid=1000,gid=1000,mode=0755 \
            ghcr.io/tphakala/birdnet-go:nightly; then
            echo "✅ Quadlet configuration syntax validated with mock device"
          else
            echo "⚠️ Testing without device mount (CI environment)"
            # Fallback: test without device mount
            podman run --dry-run --replace \
              --name test-birdnet-go \
              -v ./config:/config \
              -v ./data:/data \
              -p 8080:8080 \
              -e TZ=UTC \
              -e BIRDNET_UID=1000 \
              -e BIRDNET_GID=1000 \
              -e BIRDNET_REALTIME_AUDIO_ENABLED=false \
              --network bridge \
              --tmpfs /config/hls:exec,size=50M,uid=1000,gid=1000,mode=0755 \
              ghcr.io/tphakala/birdnet-go:nightly
            echo "✅ Quadlet configuration syntax validated without audio device"
          fi

          # Clean up mock device
          sudo rm -rf /dev/snd/mock 2>/dev/null || true

      - name: Test Podman-specific features
        run: |
          echo "Testing Podman-specific features..."

          # Test rootless capabilities
          echo "Testing rootless execution..."
          if podman run --rm --name test-rootless \
            -e BIRDNET_UID=1000 \
            -e BIRDNET_GID=1000 \
            -e BIRDNET_REALTIME_AUDIO_ENABLED=false \
            ghcr.io/tphakala/birdnet-go:nightly \
            /bin/bash -c "id && whoami && echo 'Rootless test successful'"; then
            echo "✅ Rootless execution test passed"
          else
            echo "❌ Rootless execution test failed"
            exit 1
          fi

          # Test bridge networking
          echo "Checking bridge networking..."
          if podman network ls | grep -E "bridge|podman"; then
            echo "✅ Bridge/Podman network available"
          else
            echo "⚠️ Default network configuration:"
            podman network ls
          fi

          # Test container can start without audio device in CI
          echo "Testing container startup without audio device..."
          if podman run --rm -d \
            --name test-no-audio \
            -e BIRDNET_UID=1000 \
            -e BIRDNET_GID=1000 \
            -e BIRDNET_REALTIME_AUDIO_ENABLED=false \
            -v ./config:/config \
            -v ./data:/data \
            ghcr.io/tphakala/birdnet-go:nightly; then
            
            echo "Container started, waiting for initialization..."
            sleep 5
            
            # Check if container is still running
            if podman ps | grep test-no-audio; then
              echo "✅ Container runs without audio device"
              podman stop test-no-audio
            else
              echo "❌ Container stopped unexpectedly"
              podman logs test-no-audio 2>&1 || true
              exit 1
            fi
          else
            echo "❌ Failed to start container without audio device"
            exit 1
          fi

          echo "✅ All Podman-specific features tested successfully"
